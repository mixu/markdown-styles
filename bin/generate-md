#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    List = require('minitask').list,
    nopt = require('nopt'),
    runner = require('../lib/runner.js');

var knownOpts = {
  // list layouts
  'layouts': Boolean,
  'layout': String,
  // paths
  'input': path,
  'output': path,
  'runner': path,
  'command': String,
  'asset-dir': String,
  // formatting
  'number-toc': Boolean
};

var argv = nopt(knownOpts, {}, process.argv, 2);

// defaults
if(!argv.input) {
  argv.input = path.resolve(process.cwd(), './input/');
}
if(!argv.output) {
  argv.output = path.resolve(process.cwd(), './output/');
}
if(!argv.layout) {
  argv.layout = 'jasonm23-markdown';
}
argv.defaultMeta = { title: 'example' };

// default runner
if(argv.runner) {
  runner = require(argv.runner);
}

// Load the layout
var layoutDir = __dirname + '/../layouts/';

// template is one of:
if(fs.existsSync(process.cwd() + '/' + argv.layout)) {
  // 1) the supplied argument (normalized)
  argv.template = path.normalize(process.cwd() + '/' + argv.layout);
} else if(fs.existsSync(layoutDir+argv.layout+'/page.html')) {
  // 2) a preset layout from the layout dir
  argv.template = path.normalize(layoutDir+argv.layout+'/page.html');
} else {
  // 3) the default layout
  argv.template = path.normalize(layoutDir+'plain/page.html');
}


if(argv.layouts || !fs.existsSync(argv.input)) {
  if(!fs.existsSync(argv.input)) {
    console.log(argv.input+' does not exist');
  }
  // show layouts
  console.log('Available layouts:\n'+
      fs.readdirSync(__dirname+'/../layouts/')
        .sort(function(a, b) { return a.localeCompare(b); })
        .map(function(name) { return '\t' + name})
        .join('\n')
    );
  process.exit();
}

if(argv['command']) {
  argv['command'] = argv['command'].split(' ');
}

if(argv['asset-dir']) {
  argv.assetDir = path.resolve(process.cwd() + '/' + argv['asset-dir']);
}

console.log('Layout: ' + argv.layout);
console.log('Template file: ' + argv.template);
console.log('Input: ' + argv.input);
console.log('Output: ' + path.relative(process.cwd(), argv.output));

var list = new List(),
    eachFn;

list.add(argv.input);

// console.log(argv, list.files.map(function(i){ return i.name; }));

runner(list, argv);
